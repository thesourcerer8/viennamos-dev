#ifndef QUANTITY_SET_HPP
#define QUANTITY_SET_HPP

/*
 *
 * Copyright (c) 2013, Institute for Microelectronics, TU Wien.
 *
 * This file is part of ViennaMOS     http://viennamos.sourceforge.net/
 *
 * Contact: Josef Weinbub             weinbub@iue.tuwien.ac.at
 *
 *
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

#include <boost/multi_index_container.hpp>
#include <boost/multi_index/member.hpp>
#include <boost/multi_index/ordered_index.hpp>
#include <boost/multi_index/composite_key.hpp>

#include <boost/lexical_cast.hpp>

#include <vtkSmartPointer.h>
#include <vtkDoubleArray.h>

#include <vector>

typedef vtkSmartPointer<vtkDoubleArray>         Data;
typedef std::vector<Data>                       DataSequence;


namespace tuple {
static const int KEY        = 0;
static const int UNIT       = 1;
static const int CELLLVL    = 2;
static const int TENSORLVL  = 3;
static const int SOURCE     = 4;
}



struct Quantity
{
    typedef boost::tuple<std::string, std::string, int, int, std::string> Tuple;
    typedef std::vector<Tuple>                                            TupleContainer;

    std::string     key;
    std::string     unit;
    int             cell_lvl;
    int             tensor_lvl;
    std::string     source;
    DataSequence    data_sequence;

    Quantity(std::string key, std::string unit, int cell_lvl,
             int tensor_lvl, std::string source) :
             key(key), unit(unit), cell_lvl(cell_lvl), tensor_lvl(tensor_lvl),
             source(source), data_sequence(DataSequence()) {}

    Tuple acc_tuple()
    {
        return boost::make_tuple(key, unit, cell_lvl, tensor_lvl, source);
    }

    std::string generate_key_string() const
    {
        return std::string(key+unit+boost::lexical_cast<std::string>(cell_lvl)+
                           boost::lexical_cast<std::string>(tensor_lvl)+source);
    }
};

struct Replace
{
  Replace(Data& data):data(data){}

  void operator()(Quantity& quan)
  {
    quan.data_sequence.clear();
    quan.data_sequence.push_back(data);
  }

private:
  Data data;
};

struct Add
{
  Add(Data& data):data(data){}

  void operator()(Quantity& quan)
  {
    quan.data_sequence.push_back(data);
  }

private:
  Data data;
};

struct Clear
{
  void operator()(Quantity& quan)
  {
    quan.data_sequence.clear();
  }
};

typedef boost::tuples::tuple<std::string, std::string, std::string , int, int> QuantityConfig;
typedef std::vector<QuantityConfig>                                            QuantityConfigSet;

typedef boost::multi_index::multi_index_container<
    Quantity,
    boost::multi_index::indexed_by<
        boost::multi_index::ordered_unique<
            boost::multi_index::composite_key<
                Quantity,
                boost::multi_index::member<Quantity, std::string,  &Quantity::key>,
                boost::multi_index::member<Quantity, std::string,  &Quantity::unit>,
                boost::multi_index::member<Quantity, int,          &Quantity::cell_lvl>,
                boost::multi_index::member<Quantity, int,          &Quantity::tensor_lvl>,
                boost::multi_index::member<Quantity, std::string,  &Quantity::source>
            >
        >,
        boost::multi_index::ordered_non_unique<
            boost::multi_index::member<Quantity, DataSequence,     &Quantity::data_sequence>
        >
    >
> QuantitySet;

namespace viennamos {

inline void clear(QuantitySet& quantities)
{
   QuantitySet().swap(quantities);
}

} // viennamos

#endif // QUANTITY_SET_HPP
